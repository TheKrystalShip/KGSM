#!/bin/bash

# Modifications done to this file will only affect this game server instance.
# Any changes made to this file will be overwritten if the file is regenerated.
# KGSM will not regenerated this file on its own, but there is a command that
# can be manually used to regenerate the file in case something breaks:
# > \$KGSM_ROOT/modules/files.sh --instance <instance> --create --manage

# Sets if the instance should enable/disable UPnP ports on startup/shutdown
# Values: 0 (disabled), 1 (enabled)
USE_UPNP=$USE_UPNP

# Time in seconds to wait after the save commands has been sent to the instance
SAVE_TIMEOUT_S=5

# Time in seconds to wait for the instance to shutdown before it being killed
STOP_TIMEOUT_S=30

# -----------------------------------------------------------------------------
# Do not edit past this point unless you absolutely know what you're doing.
# -----------------------------------------------------------------------------

# The ports to open and their protocols
INSTANCE_UPNP_PORTS=(${INSTANCE_UPNP_PORTS[@]})

# Full name of the instance
INSTANCE_FULL_NAME=$INSTANCE_FULL_NAME

# Input socker file where the instance will listen to commands from
INSTANCE_SOCKET_FILE=$INSTANCE_SOCKET_FILE

# Process ID file for the server
INSTANCE_PID_FILE=$INSTANCE_PID_FILE

# Process ID file for the dummy socket listener. Used to keep the socket open
# while the instance is running.
TAIL_PID_FILE=$TAIL_PID_FILE

function usage() {
  echo "
Usage:
  \$(basename "\$0") OPTION

Options:
  -h, --help            Display this help message
  --start               Start the server in the current terminal
  --start
    --background        Start the server in the background
  --stop                Stop the server
    --no-save           Do not save on shutdown
    --no-graceful       Kill the server process without sending it the stop
                        command.
  --kill                It will kill the server process
  --save                Save the current game state
  --is-active           Prints if the server is active
  --input <command>     Send an ad-hoc command to the server
  --enable-upnp         Enable UPnP ports
  --disable-upnp        Disable UPnP ports

Examples:
  \$(basename "\$0") --start --background
  \$(basename "\$0") --input '/save'
  \$(basename "\$0") --stop
"
}

# shellcheck disable=SC2199
if [[ \$@ =~ "--debug" ]]; then
  export PS4='+(\033[0;33m\${BASH_SOURCE}:\${LINENO}\033[0m): \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
  set -x
  for a; do
    shift
    case \$a in
    --debug) continue ;;
    *) set -- "\$@" "\$a" ;;
    esac
  done
fi

set -o pipefail

[[ \$# -eq 0 ]] && echo "\$(basename "\$0") ERROR: Missing arguments" >&2 && exit 1

function enable_upnp() {
  local output
  if ! output=\$(upnpc -e "\$INSTANCE_FULL_NAME" -r "\${INSTANCE_UPNP_PORTS[@]}" 2>&1); then
    echo "\$(basename "\$0") ERROR: Failed to enable UPnP ports" >&2
    echo "\$(basename "\$0") INFO: To stop these message, set USE_UPNP to 0 in \$0"
    echo "\$(basename "\$0") ERROR: \${output}" >&2
  fi
}

function disable_upnp() {
  local output
  if ! output=\$(upnpc -f "\${INSTANCE_UPNP_PORTS[@]}" 2>&1); then
    echo "\$(basename "\$0") ERROR: Failed to disable UPnP ports" >&2
    echo "\$(basename "\$0") INFO: To stop these message, set USE_UPNP to 0 in \$0"
    echo "\$(basename "\$0") ERROR: \${output}" >&2
  fi
}

trap '[[ "\$USE_UPNP" -eq 1 ]] && disable_upnp' INT

function start_foreground() {
  if [[ "\$USE_UPNP" -eq 1 ]]; then
    enable_upnp
  fi

  cd "$INSTANCE_LAUNCH_DIR" || {
    echo "\$(basename "\$0") ERROR: Failed to move into \$INSTANCE_LAUNCH_DIR, exiting" >&2
    return 1
  }

  $INSTANCE_LAUNCH_BIN $INSTANCE_LAUNCH_ARGS
}

function start_background() {
  if [[ "\$USE_UPNP" -eq 1 ]]; then
    enable_upnp
  fi

  cd "$INSTANCE_LAUNCH_DIR" || {
    echo "\$(basename "\$0") ERROR: Failed to move into \$INSTANCE_LAUNCH_DIR, exiting" >&2
    return 1
  }

  [[ -p "\$INSTANCE_SOCKET_FILE" ]] && rm "\$INSTANCE_SOCKET_FILE"

  mkfifo "\$INSTANCE_SOCKET_FILE"

  $INSTANCE_LAUNCH_BIN $INSTANCE_LAUNCH_ARGS $INSTANCE_LOGS_REDIRECT <"\$INSTANCE_SOCKET_FILE" &

  local server_pid=\$!
  echo "\$server_pid" >\$INSTANCE_PID_FILE
  echo "\$(basename "\$0") SUCCESS: Instance \$INSTANCE_FULL_NAME started with PID \$server_pid, saved to \$INSTANCE_PID_FILE"

  # Set the process group ID of the parent process
  # This is done because some servers spawn detached child processes which are
  # impossible to keep track of.
  setpgid "\$server_pid" "\$server_pid"

  # Prevent EOF on fifo by keeping the named pipe open with a dummy writer
  tail -f /dev/null > "\$INSTANCE_SOCKET_FILE" &
  echo \$! >"\$TAIL_PID_FILE"
}

function stop_server() {

  # if ! \$(is_active &>/dev/null); then
  #   echo "\$(basename "\$0") WARNING: Instance \$INSTANCE_FULL_NAME is not running"
  #   return 0
  # fi

  for a; do
    shift
    case "\$a" in
    --no-save) no_save=1 ;;
    --no-graceful) no_graceful=1 ;;
    *) continue ;;
    esac
  done

  if [[ ! "\$no_save" ]]; then
    save_game
  fi

  if [[ ! "\$no_graceful" ]]; then
    # Send stop command to socket
    if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
      echo "$INSTANCE_STOP_COMMAND" > "\$INSTANCE_SOCKET_FILE"
    fi
  fi

  # Kill the tail process
  if [[ -f "\$TAIL_PID_FILE" ]]; then
    local tail_pid
    tail_pid=\$(<"\$TAIL_PID_FILE")
    if kill -0 "\$tail_pid" 2>/dev/null; then
      kill -TERM "\$tail_pid"
    fi
  fi

  # Kill the game server
  if [[ -f "\$INSTANCE_PID_FILE" ]]; then
    local server_pid
    server_pid=\$(<"\$INSTANCE_PID_FILE")
    local output
    if kill -0 "\$server_pid" 2>/dev/null; then
      if ! output=\$(kill -TERM "-\$server_pid" 2>&1); then
        echo "\$(basename "\$0") ERROR: Failed to kill process group for PID \$server_pid." >&2
        echo "\$(basename "\$0") ERROR: Output: \${output}" >&2
        return 1
      fi
    fi
  fi

  [[ -f "\$INSTANCE_PID_FILE" ]] && rm -f "\$INSTANCE_PID_FILE"
  [[ -p "\$INSTANCE_SOCKET_FILE" ]] && rm -f "\$INSTANCE_SOCKET_FILE"
  [[ -f "\$TAIL_PID_FILE" ]] && rm -f "\$TAIL_PID_FILE"

  if [[ "\$USE_UPNP" -eq 1 ]]; then
    disable_upnp
  fi

  echo "\$(basename "\$0") SUCCESS: Instance \$INSTANCE_FULL_NAME stopped"
}

function timed_stop() {
  local no_save=\$1
  local no_graceful=\$2

  # UPnP can take a few seconds, so to avoid preemptive timeout we wait longer
  if ! timeout "\$STOP_TIMEOUT_S" "\$0" --internal-stop \${no_save:+--no-save} \${no_graceful:+--no-graceful} \$debug; then
    echo "\$(basename "\$0") ERROR: Timeout reached, killing instance" >&2
    exec "\$0" --kill \$debug
  fi
}

function kill_server() {
  if [[ ! -f "\$INSTANCE_PID_FILE" ]]; then
    echo "\$(basename "\$0") ERROR: No PID file found for \$INSTANCE_FULL_NAME, possible detached process." >&2
    return 1
  fi

  local server_pid
  server_pid=\$(<"\$INSTANCE_PID_FILE")

  if [[ -z "\$server_pid" ]]; then
    echo "\$(basename "\$0") ERROR: Instance PID file present but empty, removing" >&2
    rm -rf "\$INSTANCE_PID_FILE"
    echo "\$(basename "\$0") ERROR: No PID found, manually check for runnaway process for \$INSTANCE_FULL_NAME" >&2
    return 1
  fi

  local output
  if ! output=\$(kill -9 "\$server_pid" 2>&1); then
    echo "\$(basename "\$0") ERROR: Failed to kill \$server_pid, possible runnaway process." >&2
    echo "\$(basename "\$0") ERROR: Output: \${output}" >&2
    return 1
  fi

  return 0
}

function save_game() {
  if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
    echo "$INSTANCE_SAVE_COMMAND" >>"\$INSTANCE_SOCKET_FILE"
    sleep "\$SAVE_TIMEOUT_S"
  else
    echo "\$(basename "\$0") ERROR: Save failed: No active server found." >&2 && return 1
  fi
}

function send_input() {
  if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
    echo "\$1" >>"\$INSTANCE_SOCKET_FILE"
  else
    echo "\$(basename "\$0") ERROR: Input failed: No active server found." >&2 && return 1
  fi
}

function is_active() {
  if [[ ! -f "\$INSTANCE_PID_FILE" ]]; then
    echo "\$(basename "\$0") INFO: Inactive" && return 1
  fi

  local server_pid
  server_pid=\$(<"\$INSTANCE_PID_FILE")

  if [[ -z "\$server_pid" ]]; then
    echo "\$(basename "\$0") ERROR: Instance PID file present but empty, removing" >&2
    rm -rf "\$INSTANCE_PID_FILE"

    echo "\$(basename "\$0") INFO: Inactive" && return 1
  fi

  # Just test if a process with that PID exists
  if kill -0 "\$server_pid" 2>/dev/null; then
    echo "\$(basename "\$0") INFO: Active" && return 0
  fi

  echo "\$(basename "\$0") INFO: Inactive" && return 1
}

while [[ \$# -gt 0 ]]; do
  case "\$1" in
  -h | --help)
    usage && exit 0
    ;;
  --start)
    shift
    if [[ -z "\$1" ]]; then
      start_foreground
      exit \$?
    fi
    case "\$1" in
      --background)
        start_background
        ;;
      *)
        echo "\$(basename "\$0") ERROR: Invalid argument \$1" >&2 && exit 1
        ;;
    esac
    ;;
  --stop)
    shift
    while [[ \$# -gt 0 ]]; do
      case "\$1" in
        --no-save)
          no_save=1
          ;;
        --no-graceful)
          no_graceful=1
          ;;
        *)
          echo "\$(basename "\$0") ERROR: Invalid argument \$1" >&2 && exit 1
          ;;
      esac
      shift
    done
    timed_stop "\$no_save" "\$no_graceful"; exit \$?
    ;;
  --internal-stop)
    shift
    if [[ -z "\$1" ]]; then
      stop_server "\@";
      exit \$?
    else
      while [[ \$# -gt 0 ]]; do
        case "\$1" in
          --no-save)
            no_save=1
            ;;
          --no-graceful)
            no_graceful=1
            ;;
          *)
            echo "\$(basename "\$0") ERROR: Invalid argument \$1" >&2 && exit 1
            ;;
        esac
        shift
      done
    fi
    stop_server \${no_save:+--no-save} \${no_graceful:+--no-graceful}
    ;;
  --kill)
    kill_server; exit \$?
    ;;
  --save)
    save_game
    ;;
  --is-active)
    is_active; exit \$?
    ;;
  --input)
    shift
    [[ -z "\$1" ]] && echo "\$(basename "\$0") ERROR: Missing argument <command>" >&2 && exit 1
    send_input "\$1"
    ;;
  --enable-upnp)
    enable_upnp; exit \$?
    ;;
  --disable-upnp)
    disable_upnp; exit \$?
    ;;
  *)
    echo "\$(basename "\$0") ERROR: Unknown argument \$1" >&2 && exit 1
    ;;
  esac
  shift
done

exit 0
