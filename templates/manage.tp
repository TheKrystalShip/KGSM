#!/bin/bash

function usage() {
  echo "
Usage:
  \$(basename "\$0") [option]

Options:
  -h, --help            Display this help message
  --start               Start the server in the current terminal
  --start
    --background        Start the server in the background
  --stop                Stop the server
    --no-save           Do not save on shutdown
    --no-graceful       Kill the server process without sending it the stop
                        command.
  --kill                Same as '--stop --no-save --no-graceful'. It will NOT
                        issue a 'save' command (if applicable), and will kill
                        the server process
  --save                Save the current game state
  --is-active           Prints if the server is active
  --input <command>     Send an ad-hoc command to the server

Examples:
  \$(basename "\$0") --start --background
  \$(basename "\$0") --input /save
  \$(basename "\$0") --stop
"
}

set -o pipefail

[[ \$# -eq 0 ]] && echo "\${0##*/} ERROR: Missing arguments" >&2 && exit 1

# shellcheck disable=SC2199
if [[ \$@ =~ "--debug" ]]; then
  export PS4='+(\033[0;33m\${BASH_SOURCE}:\${LINENO}\033[0m): \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
  set -x
  for a; do
    shift
    case \$a in
    --debug) continue ;;
    *) set -- "\$@" "\$a" ;;
    esac
  done
fi

INSTANCE_SOCKET_FILE=$INSTANCE_SOCKET_FILE
INSTANCE_PID_FILE=$INSTANCE_PID_FILE
TAIL_PID_FILE=$TAIL_PID_FILE
SAVE_WAIT_TIME_S=5

function start_foreground() {
  cd "$INSTANCE_LAUNCH_DIR"
  exec $INSTANCE_LAUNCH_BIN $INSTANCE_LAUNCH_ARGS
}

function start_background() {
  cd "$INSTANCE_LAUNCH_DIR"

  [[ -p "\$INSTANCE_SOCKET_FILE" ]] && rm "\$INSTANCE_SOCKET_FILE"

  mkfifo "\$INSTANCE_SOCKET_FILE"

  exec $INSTANCE_LAUNCH_BIN $INSTANCE_LAUNCH_ARGS $INSTANCE_LOGS_REDIRECT <"\$INSTANCE_SOCKET_FILE" &

  local server_pid=\$!
  echo "\$server_pid" >\$INSTANCE_PID_FILE
  echo "$INSTANCE_FULL_NAME started with PID \$server_pid, saved to \$INSTANCE_PID_FILE"

  # Prevent EOF on fifo by keeping the named pipe open with a dummy writer
  tail -f /dev/null > "\$INSTANCE_SOCKET_FILE" &
  echo \$! >"\$TAIL_PID_FILE"
}

function stop_server() {
  for a; do
    shift
    case "\$a" in
    --no-save) no_save=1 ;;
    --no-graceful) no_graceful=1 ;;
    *) continue ;;
    esac
  done

  if [[ ! "\$no_save" ]]; then
    save_game
  fi

  if [[ ! "\$no_graceful" ]]; then
    # Send stop command to socket
    if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
      echo "$INSTANCE_STOP_COMMAND" >>"\$INSTANCE_SOCKET_FILE"
      rm -f "\$INSTANCE_SOCKET_FILE"
    fi
  fi

  # Kill the tail process
  if [[ -f "\$TAIL_PID_FILE" ]]; then
    local tail_pid
    tail_pid=\$(<"\$TAIL_PID_FILE")
    if kill -0 "\$tail_pid" 2>/dev/null; then
      kill "\$tail_pid"
    fi

    rm -f "\$TAIL_PID_FILE"
  fi

  # Kill the game server
  if [[ -f "\$INSTANCE_PID_FILE" ]]; then
    local server_pid
    server_pid=\$(<"\$INSTANCE_PID_FILE")
    if kill -0 "\$server_pid" 2>/dev/null; then
      kill "\$server_pid"
    fi

    rm -f "\$INSTANCE_PID_FILE"
  fi
}

function save_game() {
  if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
    echo "$INSTANCE_SAVE_COMMAND" >>"\$INSTANCE_SOCKET_FILE"
    sleep "\$SAVE_WAIT_TIME_S"
  else
    echo "\$(basename "\$0") ERROR: Save failed: No active server found." >&2 && return 1
  fi
}

function send_input() {
  if [[ -p "\$INSTANCE_SOCKET_FILE" ]]; then
    echo "\$1" >>"\$INSTANCE_SOCKET_FILE"
  else
    echo "\$(basename "\$0") ERROR: Input failed: No active server found." >&2 && return 1
  fi
}

function is_active() {
  if [[ -f "\$INSTANCE_PID_FILE" ]]; then
    local server_pid
    server_pid=\$(<"\$INSTANCE_PID_FILE")
    if kill -0 "\$server_pid" 2>/dev/null; then
      # kill "\$server_pid"
      echo "\$(basename "\$0") INFO: Active" && return 0
    fi

    echo "\$(basename "\$0") WARNING: Inactive, but PID file exists, removing" && return 1
    stop_server --no-save --no-graceful
  fi

  echo "\$(basename "\$0") INFO: Inactive" && return 1
}

while [[ \$# -gt 0 ]]; do
  case "\$1" in
  -h | --help)
    usage && exit 0
    ;;
  --start)
    shift
    if [[ "\$1" == "--background" ]]; then
      start_background
    else
      start_foreground
    fi
    ;;
  --stop)
    shift
    while [[ \$# -gt 0 ]]; do
      case "\$1" in
        --no-save)
          no_save=1
          ;;
        --no-graceful)
          no_graceful=1
          ;;
        *)
          echo "\$(basename "\$0") ERROR: Invalid argument \$1" >&2 && exit 1
          ;;
      esac
      shift
    done
    if ! timeout "\$((\$SAVE_WAIT_TIME_S+1))" "\$0" --internal-stop \${no_save:+--no-save} \${no_graceful:+--no-graceful} \$debug; then
      echo "\$(basename "\$0") ERROR: Timeout reached, killing instance" >&2
      "\$0" --kill \$debug
    fi
    ;;
  --internal-stop)
    shift
    if [[ -z "\$1" ]]; then
      stop_server "\@";
      exit \$?
    else
      while [[ \$# -gt 0 ]]; do
        case "\$1" in
          --no-save)
            no_save=1
            ;;
          --no-graceful)
            no_graceful=1
            ;;
          *)
            echo "\$(basename "\$0") ERROR: Invalid argument \$1" >&2 && exit 1
            ;;
        esac
        shift
      done
    fi
    stop_server \${no_save:+--no-save} \${no_graceful:+--no-graceful}
    ;;
  --kill)
    stop_server --no-save --no-graceful
    ;;
  --save)
    save_game
    ;;
  --is-active)
    is_active
    ;;
  --input)
    shift
    [[ -z "\$1" ]] && echo "\$(basename "\$0") ERROR: Missing argument <command>" >&2 && exit 1
    send_input "\$1"
    ;;
  *)
    echo "\$(basename "\$0") ERROR: Unknown argument \$1" >&2 && exit 1
    ;;
  esac
  shift
done

exit 0
