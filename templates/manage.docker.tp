#!/usr/bin/env bash

# This file is autogenerated
#
# Modifications done to this file will only affect this game server instance.
# Any changes made to this file will be overwritten if the file is regenerated.
# KGSM will not regenerated this file on its own, but there is a command that
# can be manually used to regenerate the file in case something breaks:
# > $KGSM_ROOT/modules/files.sh --instance <instance> --create --manage

# === INJECT CONFIG ===

self=$(basename "$0")

function usage() {
  echo "
Usage:
  $self OPTION

Options:
  -h, --help            Display this help message
  --start               Start the server in the current terminal
  --stop                Stop the server
  --is-active           Prints if the server is active
  --input <command>     Send an ad-hoc command to the server
  --logs                Print last 10 lines of the log
  --logs [-f, --follow] Read live logs
  --enable-upnp         Enable UPnP ports
  --disable-upnp        Disable UPnP ports

Examples:
  $self --start
  $self --input '/save'
  $self --stop
"
}

# shellcheck disable=SC2199
if [[ $@ =~ "--debug" ]]; then
  export PS4='+(\033[0;33m${BASH_SOURCE}:${LINENO}\033[0m): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -x
  for a; do
    shift
    case $a in
    --debug) continue ;;
    *) set -- "$@" "$a" ;;
    esac
  done
fi

set -o pipefail

[[ $# -eq 0 ]] && echo "$self ERROR: Missing arguments" >&2 && exit 1

function enable_upnp() {
  local output
  if ! output=$(upnpc -e "$INSTANCE_FULL_NAME" -r "${INSTANCE_UPNP_PORTS[@]}" 2>&1); then
    echo "$self ERROR: Failed to enable UPnP ports" >&2
    echo "$self ERROR: ${output}" >&2
  fi
}

function disable_upnp() {
  local output
  if ! output=$(upnpc -f "${INSTANCE_UPNP_PORTS[@]}" 2>&1); then
    echo "$self ERROR: Failed to disable UPnP ports" >&2
    echo "$self ERROR: ${output}" >&2
  fi
}

trap '[[ "$USE_UPNP" -eq 1 ]] && disable_upnp' INT

function start_foreground() {
  if [[ "$USE_UPNP" -eq 1 ]]; then
    enable_upnp
  fi

  # https://docs.docker.com/reference/cli/docker/container/start/
  docker start -a "$INSTANCE_FULL_NAME" $INSTANCE_LAUNCH_ARGS
}

function start_background() {
  if [[ "$USE_UPNP" -eq 1 ]]; then
    enable_upnp
  fi

  # https://docs.docker.com/reference/cli/docker/container/start/
  docker start "$INSTANCE_FULL_NAME" $INSTANCE_LAUNCH_ARGS
}

function stop_server() {
  if ! $(is_active &>/dev/null); then
    echo "$self WARNING: Instance $INSTANCE_FULL_NAME is not running"
    return 0
  fi

  if [[ "$USE_UPNP" -eq 1 ]]; then
    disable_upnp
  fi

  # https://docs.docker.com/reference/cli/docker/container/stop/
  docker stop "$INSTANCE_FULL_NAME" -t $STOP_TIMEOUT_S

  echo "$self SUCCESS: Instance $INSTANCE_FULL_NAME stopped"
}

function save_game() {
  return
}

function send_input() {
  return
}

function is_active() {
  if [ "$(docker container inspect -f '{{.State.Status}}' "$INSTANCE_FULL_NAME")" = "running" ]; then
    echo "$self INFO: Active" && true
  fi

  echo "$self INFO: Inactive" && false
}

function print_logs() {
  local follow=$1

  if [[ "$follow" == "--follow" ]]; then
    docker logs -f "$INSTANCE_FULL_NAME"
  else
    docker logs -n 10 "$INSTANCE_FULL_NAME"
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
  -h | --help)
    usage && exit 0
    ;;
  --start)
    shift
    if [[ -z "$1" ]]; then
      start_foreground
      exit $?
    fi
    case "$1" in
    --background)
      start_background
      ;;
    *)
      echo "$self ERROR: Invalid argument $1" >&2 && exit 1
      ;;
    esac
    ;;
  --stop)
    stop_server
    exit $?
    ;;
  --kill)
    kill_server
    exit $?
    ;;
  --save)
    save_game
    exit $?
    ;;
  --is-active)
    is_active
    exit $?
    ;;
  --input)
    shift
    [[ -z "$1" ]] && echo "$self ERROR: Missing argument <command>" >&2 && exit 1
    send_input "$1"
    ;;
  --logs)
    shift
    follow=""
    if [[ "$1" == "-f" ]] || [[ "$1" == "--follow" ]]; then
      follow="--follow"
    fi
    print_logs $follow
    exit $?
    ;;
  --enable-upnp)
    enable_upnp
    exit $?
    ;;
  --disable-upnp)
    disable_upnp
    exit $?
    ;;
  *)
    echo "$self ERROR: Unknown argument $1" >&2 && exit 1
    ;;
  esac
  shift
done

exit 0
