#!/usr/bin/env bash

# This file is autogenerated
#
# Modifications done to this file will only affect this game server instance.
# Any changes made to this file will be overwritten if the file is regenerated.
# KGSM will not regenerated this file on its own, but there is a command that
# can be manually used to regenerate the file in case something breaks:
# > $KGSM_ROOT/modules/files.sh --instance <instance> --create --manage

debug=
# shellcheck disable=SC2199
if [[ $@ =~ "--debug" ]]; then
  debug=" --debug"
  export PS4='+(\033[0;33m${BASH_SOURCE}:${LINENO}\033[0m): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -x
  for a; do
    shift
    case $a in
    --debug) continue ;;
    *) set -- "$@" "$a" ;;
    esac
  done
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Security function to validate configuration keys
# Prevents code injection through malicious config files by ensuring
# only safe variable names can be exported to the environment
function __validate_config_key() {
  local key="$1"

  # Allow only alphanumeric characters and underscores
  # Key must start with letter or underscore
  # This prevents injection of special shell variables or commands
  if [[ "$key" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
    return 0
  else
    return 1
  fi
}

# Function to source the instance configuration file
function __source_instance_config() {
  local config_file="$1"

  if [[ ! -f "$config_file" ]]; then
    echo "ERROR: Instance configuration file not found: $config_file"
    exit 1
  fi

  # Source the configuration file and prefix all variables with "instance_"
  # Added security validation to prevent code injection attacks
  while IFS='=' read -r key value || [ -n "$key" ]; do
    # Skip comments and empty lines
    [[ "$key" =~ ^#.*$ || -z "$key" ]] && continue

    # Remove leading/trailing whitespace
    key="${key#"${key%%[![:space:]]*}"}"
    key="${key%"${key##*[![:space:]]}"}"
    value="${value#"${value%%[![:space:]]*}"}"
    value="${value%"${value##*[![:space:]]}"}"

    # Security check: Validate key name to prevent code injection
    if ! __validate_config_key "$key"; then
      echo "ERROR: Invalid configuration key '$key' in $config_file"
      echo "Configuration keys must contain only alphanumeric characters and underscores,"
      echo "and must start with a letter or underscore."
      exit 1
    fi

    # Remove quotes from value
    value="${value#\"}"
    value="${value%\"}"
    value="${value#\'}"
    value="${value%\'}"

    # Check if the key already starts with "instance_"
    if [[ "$key" =~ ^instance_ ]]; then
      # If it already has the prefix, export it as is
      export "${key}=${value}"
    else
      # Otherwise, add the "instance_" prefix
      export "instance_${key}=${value}"
    fi
  done < "$config_file"
}

# Source the instance configuration file
INSTANCE_NAME="$(basename "$SCRIPT_DIR")"
CONFIG_FILE="$SCRIPT_DIR/${INSTANCE_NAME}.config.ini"
__source_instance_config "$CONFIG_FILE"

# UPnP state tracking
UPNP_STATE_FILE="$SCRIPT_DIR/.upnp_enabled"

self=$(basename "$0")

function usage() {
  echo "
Usage:
  $self OPTION

Options:
  -h, --help                Display this help message
  --start                   Start the server in the current terminal
  --start [--background]    Start the server in the background
  --stop                    Stop the server
  --is-active               Prints if the server is active
  --input <command>         Send an ad-hoc command to the server
  --logs                    Print last 10 lines of the log (default)
  --logs --tail <number>    Print last <number> lines of the log
  --logs --lines <number>   Alias for --tail (Unix standard)
  --logs -n <number>        Alias for --tail (short form)
  --logs [-f, --follow]     Read live logs (starts with last 10 lines)
  --logs --follow --tail <number>  Follow logs starting with last <number> lines
  --enable-upnp             Enable UPnP ports
  --disable-upnp            Disable UPnP ports

  --download                Downloads the game server files
  --download [version]      Downloads the game server files for a specific version
  --deploy                  Deploys the game server files from the temporary directory
  --update                  Updates the game server files to the latest version

  --list-backups            Print a list of available backups
  --create-backup           Create a backup of the game server files
  --restore-backup <source> Restore a specified backup

  --version                 Print the locally installed version
  --version [--save <ver>]  Save a given version to file
  --version [--latest]      Print the latest available version
  --version [--compare]     Test the local version vs the latest available.

Examples:
  $self --start --background
  $self --input '/save'
  $self --stop
  $self --logs --tail 50
  $self --logs --follow --tail 100
"
}

SUCCESS="SUCCESS"
INFO="INFO"
ERROR="ERROR"
WARNING="WARNING"

## Colored output
# Check if stdout is tty
if test -t 1; then
  ncolors=0

  # Check for availability of tput
  if command -v tput >/dev/null 2>&1; then
    ncolors="$(tput colors)"
  fi

  # More than 8 means it supports colors
  if [[ $ncolors ]] && [[ "$ncolors" -gt 8 ]]; then
    export COLOR_RED="\033[0;31m"
    export COLOR_GREEN="\033[0;32m"
    export COLOR_ORANGE="\033[0;33m"
    export COLOR_BLUE="\033[0;34m"
    export COLOR_END="\033[0m"

    SUCCESS="${COLOR_GREEN}${SUCCESS}${COLOR_END}"
    INFO="${COLOR_BLUE}${INFO}${COLOR_END}"
    ERROR="${COLOR_RED}${ERROR}${COLOR_END}"
    WARNING="${COLOR_ORANGE}${WARNING}${COLOR_END}"
  fi
fi

function __print_success() {
  echo -e "[$SUCCESS] ${BASH_SOURCE[-1]##*/}:${BASH_LINENO[0]} $1"
}

function __print_info() {
  echo -e "[$INFO] ${BASH_SOURCE[-1]##*/}:${BASH_LINENO[0]} $1"
}

function __print_error() {
  echo -e "[$ERROR] ${BASH_SOURCE[-1]##*/}:${BASH_LINENO[0]} $1" >&2
}

function __print_warning() {
  echo -e "[$WARNING] ${BASH_SOURCE[-1]##*/}:${BASH_LINENO[0]} $1" >&2
}

set -o pipefail

if [[ $# -eq 0 ]]; then
  __print_error "Missing arguments"
  exit 1
fi

function _enable_upnp() {
  local output

  __print_info "Enabling UPnP..."

  # Check if UPnP ports array is set and not empty
  # This prevents command failures when the array is unset or empty
  if [[ -z "${instance_upnp_ports[*]:-}" ]]; then
    __print_error "No UPnP ports configured (instance_upnp_ports is empty or unset)"
    return 1
  fi

  if ! output=$(upnpc -e "$instance_name" -r "${instance_upnp_ports[@]}" 2>&1); then
    __print_error "Failed to enable UPnP ports"
    __print_info "To stop these message, set 'enable_port_forwarding' to 0 in $0"
    __print_error "${output}"
    return 1
  fi

  # Mark UPnP as enabled
  touch "$UPNP_STATE_FILE"
  __print_success "UPnP enabled"
}

function _disable_upnp() {
  local output

  __print_info "Disabling UPnP..."

  # Check if UPnP ports array is set and not empty
  # This prevents command failures when the array is unset or empty
  if [[ -z "${instance_upnp_ports[*]:-}" ]]; then
    __print_error "No UPnP ports configured (instance_upnp_ports is empty or unset)"
    return 1
  fi

  if ! output=$(upnpc -f "${instance_upnp_ports[@]}" 2>&1); then
    __print_error "Failed to disable UPnP ports"
    __print_info "To stop these message, set 'instance_enable_port_forwarding' to 'false' in $0"
    __print_error "${output}"
    return 1
  fi

  # Mark UPnP as disabled
  rm -f "$UPNP_STATE_FILE"
  __print_success "UPnP disabled"
}

# Helper function to check if UPnP is currently enabled
function _is_upnp_enabled() {
  [[ -f "$UPNP_STATE_FILE" ]]
}

# Manual UPnP disable that works regardless of state
function _manual_disable_upnp() {
  local output

  __print_info "Manually disabling UPnP..."

  # Check if UPnP ports array is set and not empty
  # This prevents command failures when the array is unset or empty
  if [[ -z "${instance_upnp_ports[*]:-}" ]]; then
    __print_error "No UPnP ports configured (instance_upnp_ports is empty or unset)"
    return 1
  fi

  if ! output=$(upnpc -f "${instance_upnp_ports[@]}" 2>&1); then
    __print_error "Failed to disable UPnP ports"
    __print_error "${output}"
    return 1
  fi

  # Mark UPnP as disabled
  rm -f "$UPNP_STATE_FILE"
  __print_success "UPnP manually disabled"
}

# Cleanup function for SIGINT, SIGTERM, and EXIT
function _term_cleanup() {
  # Only disable UPnP if it was actually enabled AND the instance is not running
  if [[ -f "$UPNP_STATE_FILE" ]] && [[ "${instance_enable_port_forwarding:-false}" == "true" ]]; then
    # Check if instance is still running before disabling UPnP
    if ! _is_active &>/dev/null; then
      _disable_upnp
    fi
  fi
}

# Make sure to disable UPnP if it was enabled
# This is done to prevent leaving UPnP ports open
# when the script is interrupted
trap '_term_cleanup' INT TERM EXIT

# Start the server in the current terminal
function _start() {
  __print_info "Starting server in foreground..."

  if [[ "$instance_enable_port_forwarding" == "true" ]]; then
    if ! _enable_upnp; then
      __print_warning "Failed to enable UPnP, continuing without port forwarding"
    fi
  fi

  if [[ "$instance_auto_update" == "true" ]]; then
    _update
  fi

  # Use docker compose up to start the container with logs visible
  # Change to working directory first to ensure docker-compose.yml is found
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" up)
}

# Start the server in the background
function _start_background() {
  __print_info "Starting server in background..."

  if [[ "$instance_enable_port_forwarding" == "true" ]]; then
    if ! _enable_upnp; then
      __print_warning "Failed to enable UPnP, continuing without port forwarding"
    fi
  fi

  # Use docker compose up -d to start the container in detached mode
  # Change to working directory first to ensure docker-compose.yml is found
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" up -d)

  __print_success "Server started in background"
}

function _send_save_command() {
  __print_info "Saving game state..."
  # For Docker containers, this may not do anything unless the game has a specific save command
  # that can be sent to the container
  return 0
}

# Security function to validate and sanitize input commands
# Prevents command injection attacks through user-provided input
function __sanitize_input_command() {
  local command="$1"

  # Check for dangerous characters that could be used for command injection
  # Using individual checks to avoid regex complexity issues
  if [[ "$command" == *";"* ]] || [[ "$command" == *"&"* ]] || [[ "$command" == *"|"* ]] || \
     [[ "$command" == *"\`"* ]] || [[ "$command" == *"\$("* ]] || [[ "$command" == *")"* ]] || \
     [[ "$command" == *"{"* ]] || [[ "$command" == *"}"* ]] || [[ "$command" == *"["* ]] || \
     [[ "$command" == *"]"* ]] || [[ "$command" == *"\\"* ]]; then
    echo "ERROR: Input command contains potentially dangerous characters"
    echo "Rejected characters: ; & | \` \$( ) { } [ ] \\"
    echo "Command: $command"
    return 1
  fi

  return 0
}

function _send_input() {
  local command=$1
  __print_info "Sending command: $command"

  # Security check: Sanitize input to prevent command injection
  if ! __sanitize_input_command "$command"; then
    __print_error "Command rejected for security reasons"
    return 1
  fi

  # Check if the container is running using the existing _is_active function
  if ! _is_active &>/dev/null; then
    __print_error "Container '$instance_name' is not running"
    return 1
  fi

  # Get the management file path from the container's environment
  local management_file
  management_file=$(docker exec "$instance_name" bash -c 'echo $MANAGEMENT_FILE' 2>/dev/null)

  if [[ -z "$management_file" ]]; then
    __print_error "Could not determine management script path in container. \$MANAGEMENT_FILE not set."
    return 1
  fi

  # Call the container's internal management script with the --input flag
  # Using printf to safely pass the command without shell interpretation
  if ! printf '%s\n' "$command" | docker exec -i "$instance_name" "$management_file" --input; then
    __print_error "Failed to send command to container '$instance_name'"
    return 1
  fi

  __print_success "Command sent to container"
  return 0
}

function _is_active() {
  # Check if the container is running using docker compose
  # Use subshell to avoid polluting working directory and eliminate race condition
  if (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" ps --services --filter "status=running" | grep -q .); then
    __print_info "Active"
    return 0
  fi

  __print_info "Inactive"
  return 1
}

function _print_logs() {
  local follow=$1
  local line_count=${2:-10}

  if [[ "$follow" == "--follow" ]]; then
    (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" logs --tail="$line_count" -f) &
    tail_pid=$!
    wait "$tail_pid"
  else
    (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" logs --tail="$line_count")
  fi
}

function _stop_server() {
  local no_save=$1
  local no_graceful=$2

  __print_info "Stopping server..."

  if ! _is_active &>/dev/null; then
    __print_warning "Instance $instance_name is not running"
    return 0
  fi

  # Save game if requested
  if [[ "$no_save" != "true" ]]; then
    _send_save_command
  fi

  if [[ "$instance_enable_port_forwarding" == "true" ]]; then
    _disable_upnp
  fi

  # Use docker compose down to stop the container
  # Run in the working directory where docker-compose.yml is located
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" down)

  __print_success "Instance $instance_name stopped"
  return 0
}

function _update() {
  __print_info "Updating Docker container..."

  # For container instances, updating means:
  # 1. Pull the latest images defined in the docker-compose file
  # 2. Recreate the containers with the latest images

  # Pull the latest images - run in the working directory
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" pull)

  # If the container is running, stop it and recreate
  if _is_active &>/dev/null; then
    (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" up -d --force-recreate)
  else
    # Just recreate without starting
    (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" up -d)
    (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" down)
  fi

  # Call the management script with the --update flag inside the container
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" run --rm --update)

  # Update version information
  echo "latest" >"$instance_version_file"

  __print_success "Update complete"
  return 0
}

function _create_backup() {
  __print_info "Creating backup of Docker container data..."

  local datetime="$(date +"%Y-%m-%dT%H:%M:%S")"
  local output="${instance_backups_dir:-$instance_working_dir/backups}/${instance_name}-${datetime}.backup.tar.gz"

  # Create backups directory if it doesn't exist
  mkdir -p "$(dirname "$output")"

  # Make sure the container is stopped before backing up
  if _is_active &>/dev/null; then
    _stop_server
  fi

  # Create a tar.gz of the entire working directory
  tar -czf "$output" -C "$instance_working_dir" .

  __print_success "Backup created: $output"
  return 0
}

function _restore_backup() {
  local backup="$1"
  local backups_dir="${instance_backups_dir:-$instance_working_dir/backups}"
  local source="$backups_dir/$backup"

  __print_info "Restoring backup from $source..."

  if [[ ! -f "$source" ]]; then
    __print_error "Backup file not found: $source"
    return 1
  fi

  # Stop the container if it's running
  if _is_active &>/dev/null; then
    _stop_server
  fi

  # Extract the backup to the working directory
  tar -xzf "$source" -C "$instance_working_dir"

  __print_success "Backup restored from $source"
  return 0
}

function _list_backups() {
  # List all backup files in the backups directory
  local backups_dir="${instance_backups_dir:-$instance_working_dir/backups}"

  if [[ ! -d "$backups_dir" ]]; then
    __print_warning "No backups directory found at: $backups_dir"
    return 0
  fi

  # Check if there are any backups
  if [[ -z "$(ls -A "$backups_dir" 2>/dev/null)" ]]; then
    __print_info "No backups found in $backups_dir"
    return 0
  fi

  __print_info "Available backups:"
  ls -1 "$backups_dir"
}

function _get_installed_version() {
  if [[ -f "$instance_version_file" ]]; then
    cat "$instance_version_file"
  else
    echo "latest"
  fi
}

function _get_latest_version() {
  # For containers, we can use the Docker image tag or digest
  # This example uses the 'latest' tag, but could be modified to check for
  # updated images using Docker Hub API or other methods
  echo "latest"
}

function _compare_versions() {
  # For Docker containers, comparing versions is less relevant
  # since we're working with images and not actual game files
  # We can pull the latest image and check if it's different
  echo "latest"
  return 1 # Return non-zero to indicate no update needed
}

function _save_version() {
  local version=$1

  __print_info "Saving version ${version}..."

  echo "$version" >"$instance_version_file"

  __print_success "Version saved"
  return 0
}

function _download() {
  local version="${1:-latest}"

  __print_info "Downloading Docker image version ${version}..."

  # For container-based instances, downloading means pulling the images
  # defined in the compose file
  # This will pull all images defined in the docker-compose.yml file
  # Run in the working directory where docker-compose.yml is located
  (cd "$instance_working_dir" && docker compose -f "$instance_compose_file" pull)

  __print_success "Download complete"
  return 0
}

function _deploy() {
  # For Docker containers, deploying is a noop
  # since the container is already defined in the docker-compose.yml file
  __print_info "Deploying Docker container..."

  # Return success
  __print_success "Deploy complete"
  return 0
}

# Check if docker and docker-compose are installed
if ! command -v docker &>/dev/null; then
  __print_error "Docker is not installed. Please install Docker to use this script."
  exit 1
fi

if ! command -v docker compose &>/dev/null; then
  __print_error "Docker Compose is not installed. Please install Docker Compose to use this script."
  exit 1
fi

# Main execution starts here - process command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
  -h | --help)
    usage && exit 0
    ;;
  --start)
    shift
    if [[ -z "$1" ]]; then
      _start
      exit $?
    fi
    case "$1" in
    --background)
      _start_background
      exit $?
      ;;
    *)
      __print_error "Invalid argument $1"
      exit 1
      ;;
    esac
    ;;
  --stop)
    shift
    no_save=false
    no_graceful=false
    while [[ $# -gt 0 ]]; do
      case "$1" in
      --no-save)
        no_save=true
        shift
        ;;
      --no-graceful)
        no_graceful=true
        shift
        ;;
      *)
        break
        ;;
      esac
    done
    _stop_server "$no_save" "$no_graceful"
    exit $?
    ;;
  --save)
    _send_save_command
    exit $?
    ;;
  --is-active)
    _is_active
    exit $?
    ;;
  --input)
    shift
    [[ -z "$1" ]] && __print_error "Missing argument <command>" && exit 1
    _send_input "$1"
    exit $?
    ;;
  --logs)
    shift
    follow=""
    line_count=10

    while [[ $# -gt 0 ]]; do
      case "$1" in
      -f | --follow)
        follow="--follow"
        shift
        ;;
      --tail | --lines)
        shift
        if [[ -z "$1" ]] || [[ ! "$1" =~ ^[0-9]+$ ]]; then
          __print_error "Missing or invalid number for --tail/--lines argument"
          exit 1
        fi
        line_count="$1"
        shift
        ;;
      -n)
        shift
        if [[ -z "$1" ]] || [[ ! "$1" =~ ^[0-9]+$ ]]; then
          __print_error "Missing or invalid number for -n argument"
          exit 1
        fi
        line_count="$1"
        shift
        ;;
      *)
        break
        ;;
      esac
    done

    _print_logs "$follow" "$line_count"
    exit $?
    ;;
  --enable-upnp)
    _enable_upnp
    exit $?
    ;;
  --disable-upnp)
    _manual_disable_upnp
    exit $?
    ;;
  --version)
    shift
    if [[ -z "$1" ]]; then
      _get_installed_version
      exit $?
    fi
    case "$1" in
    --compare)
      _compare_versions
      exit $?
      ;;
    --latest)
      _get_latest_version
      exit $?
    ;;
    --save)
      shift
      if [[ -z "$1" ]]; then
        __print_error "Missing argument <version>"
        exit 1
      fi
      _save_version "$1"
      exit $?
    ;;
    *)
      __print_error "Invalid argument $1"
      exit 1
    ;;
    esac
    ;;
  --download)
    shift
    version=
    if [[ -n "$1" && "$1" != --* ]]; then
      version="$1"
    fi
    _download "$version"
    exit $?
    ;;
  --deploy)
    _deploy
    exit $?
    ;;
  --update)
    _update
    exit $?
    ;;
  --create-backup)
    _create_backup
    exit $?
    ;;
  --restore-backup)
    shift
    if [[ -z "$1" ]]; then
      __print_error "Missing argument <backup>"
      exit 1
    fi
    _restore_backup "$1"
    exit $?
    ;;
  --list-backups)
    _list_backups
    exit $?
    ;;
  *)
    __print_error "Unknown argument $1"
    exit 1
    ;;
  esac
  shift
done

exit 0
